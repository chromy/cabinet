#!/usr/bin/env python3

import sys
import os
import argparse
import subprocess
import shutil

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
NGINX_SRC = os.path.join(ROOT_DIR, "nginx.conf")
INDEX_SRC = os.path.join(ROOT_DIR, "index.html")

def ensure_dir(path):
  if not os.path.exists(path):
    os.mkdir(path)
  if not os.path.isdir(path):
    print(f"'{path}' is a file but should be directory", file=sys.stderr)
    exit(1)


class Dev(object):
  def __init__(self, args):
    path = args.PATH
    self.abs_path = os.path.abspath(path)
    self.config_path = os.path.join(self.abs_path, "nginx.conf")
    self.pid_path = os.path.join(self.abs_path, "cabinet.pid")
    self.www_path = os.path.join(self.abs_path, "www")
    self.index_path = os.path.join(self.www_path, "html")

  def build(self):
    ensure_dir(self.abs_path)
    ensure_dir(self.www_path)
    ensure_dir(os.path.join(self.www_path, "html"))
    ensure_dir(os.path.join(self.www_path, "files"))

    abs_path = self.abs_path
    variables = {
        "CABINET_USER": "nothing",
        "CABINET_PID": self.pid_path,
        "CABINET_ACCESS_LOG": os.path.join(abs_path, "access.log"),
        "CABINET_ERROR_LOG": os.path.join(abs_path, "error.log"),
        "CABINET_WWW": self.www_path,
    }

    with open(NGINX_SRC) as f:
      text = f.read()
    for key, value in variables.items():
      text = text.replace(key, value)
    with open(self.config_path, "w") as f:
      f.write(text)

    shutil.copy(INDEX_SRC, self.index_path)

    with open(os.path.join(self.www_path, "files", "foo"), "w") as f:
      f.write("bar")


  def nginx(self, *args):
    subprocess.check_call(["nginx", "-c", self.config_path] + list(args))

  def run_nginx(self):
    if os.path.exists(self.pid_path):
      self.stop_nginx()
    self.nginx()

  def stop_nginx(self):
    self.nginx("-s", "stop")


def main():
  parser = argparse.ArgumentParser()
  parser.add_argument("PATH")
  args = parser.parse_args()
  path = args.PATH
  d = Dev(args)
  d.build()
  d.run_nginx()

  return 0

if __name__ == '__main__':
  sys.exit(main())

